### **第一阶段：离线准备阶段 (Offline Phase)**

这个阶段的目标是预先计算好所有与用户真实数据无关的、但协议必需的加密材料，我们称之为“相关随机性” (Correlated Randomness)。这个过程由**辅助服务器 ($P_0$)** 主导，在用户提交任何真实数据之前完成。

1.  **用户注册与密钥分发 (User Registration):**
    * 每个用户在系统中注册，并从辅助服务器 $P_0$ 处获得一个唯一的身份标识 `i` (作为其“邮箱”地址) 和一个伪随机种子 `s_i`。

2.  **生成洗牌相关性 (Shuffle Correlation):**
    * $P_0$ 生成一个秘密的、随机的**置换矩阵 (Permutation Matrix) `M`**，这个矩阵定义了之后将如何对用户数据进行洗牌。
    * $P_0$ 同时为每个用户 `i` 生成一个随机的**数据掩码 (mask) `a_i`**。
    * $P_0$ 将置换矩阵 `M` 和掩码向量 `a` 进行秘密分享，分发给两个**计算服务器 ($P_1, P_2$)**。为了极大地压缩通信量，这一步使用了**分布式点函数 (DPF)** 等先进技术。

3.  **生成差分隐私相关性 (DP Correlation):**
    * $P_0$ 从一个满足差分隐私的分布中（例如，离散拉普拉斯分布）采样出一个**噪声向量 `r`**。
    * $P_0$ 同样将这个噪声向量 `r` 进行秘密分享，分发给两个计算服务器。

**阶段成果:** 在离线阶段结束后，两个计算服务器 $P_1$ 和 $P_2$ 各自持有了置换矩阵、数据掩码和DP噪声的“一半”（即秘密分享的份额）。它们对完整的置换、掩码或噪声一无所知。

---

### **第二阶段：在线执行阶段 (Online Phase)**

这个阶段在用户需要提交真实数据时触发。得益于离线阶段的充分准备，这个阶段的效率极高，服务器之间无需任何通信。

1.  **用户提交数据 (User Submission):**
    * 用户 `i` 拥有自己的私有数据 `x_i`。
    * 用户使用离线阶段获得的种子 `s_i` 计算出自己的数据掩码 `a_i`。
    * 用户计算出自己数据的“另一半”分享：`[x_i]_2 = x_i - a_i`，并将其发送给两个计算服务器。 (第一半分享 `[x_i]_1 = a_i` 实际上已经在离线阶段被隐式地确定了)。

2.  **静默洗牌 (Silent Shuffle - 本地计算):**
    * 每个计算服务器 $P_j$ (j=1, 2) 现在拥有了洗牌相关性的分享和所有用户提交的数据分享 `[X]_2`。
    * 每个服务器**完全在本地**执行计算，将置换矩阵的分享与数据分享相乘，得到洗牌后数据 `X'` 的分享。**此过程 $P_1$ 和 $P_2$ 之间没有任何网络通信。**

3.  **静默随机化 (Silent Randomization - 本地计算):**
    * 每个计算服务器 $P_j$ 接着取出自己持有的洗牌后数据的分享 `[X']_j` 和DP噪声的分享 `[r]_j`。
    * 服务器**完全在本地**将这两者相加，得到最终经过处理的数据 `Y` 的分享 `[Y]_j`。**此过程同样没有任何服务器间通信。**

4.  **结果重构 (Output Reconstruction):**
    * 最后，数据分析方 (Curator, $P_3$) 从两个计算服务器收集最终的分享 `[Y]_1` 和 `[Y]_2`。
    * $P_3$ 将这两部分分享相加，即可重构出完整的、经过洗牌和差分隐私保护的结果 `Y`，用于后续分析。